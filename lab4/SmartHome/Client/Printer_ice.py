# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Printer.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

_M_Demo._t_Printer = IcePy.defineValue('::Demo::Printer', Ice.Value, -1, (), False, True, None, ())

if 'PrinterPrx' not in _M_Demo.__dict__:
    _M_Demo.PrinterPrx = Ice.createTempClass()
    class PrinterPrx(Ice.ObjectPrx):

        def printString(self, s, context=None):
            return _M_Demo.Printer._op_printString.invoke(self, ((s, ), context))

        def printStringAsync(self, s, context=None):
            return _M_Demo.Printer._op_printString.invokeAsync(self, ((s, ), context))

        def begin_printString(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Printer._op_printString.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_printString(self, _r):
            return _M_Demo.Printer._op_printString.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.PrinterPrx.ice_checkedCast(proxy, '::Demo::Printer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.PrinterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Printer'
    _M_Demo._t_PrinterPrx = IcePy.defineProxy('::Demo::Printer', PrinterPrx)

    _M_Demo.PrinterPrx = PrinterPrx
    del PrinterPrx

    _M_Demo.Printer = Ice.createTempClass()
    class Printer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Printer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Printer'

        @staticmethod
        def ice_staticId():
            return '::Demo::Printer'

        def printString(self, s, current=None):
            raise NotImplementedError("servant method 'printString' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_PrinterDisp)

        __repr__ = __str__

    _M_Demo._t_PrinterDisp = IcePy.defineClass('::Demo::Printer', Printer, (), None, ())
    Printer._ice_type = _M_Demo._t_PrinterDisp

    Printer._op_printString = IcePy.Operation('printString', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Demo.Printer = Printer
    del Printer

_M_Demo._t_Bulbulator = IcePy.defineValue('::Demo::Bulbulator', Ice.Value, -1, (), False, True, None, ())

if 'BulbulatorPrx' not in _M_Demo.__dict__:
    _M_Demo.BulbulatorPrx = Ice.createTempClass()
    class BulbulatorPrx(Ice.ObjectPrx):

        def bulbulate(self, b, context=None):
            return _M_Demo.Bulbulator._op_bulbulate.invoke(self, ((b, ), context))

        def bulbulateAsync(self, b, context=None):
            return _M_Demo.Bulbulator._op_bulbulate.invokeAsync(self, ((b, ), context))

        def begin_bulbulate(self, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Bulbulator._op_bulbulate.begin(self, ((b, ), _response, _ex, _sent, context))

        def end_bulbulate(self, _r):
            return _M_Demo.Bulbulator._op_bulbulate.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.BulbulatorPrx.ice_checkedCast(proxy, '::Demo::Bulbulator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.BulbulatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Bulbulator'
    _M_Demo._t_BulbulatorPrx = IcePy.defineProxy('::Demo::Bulbulator', BulbulatorPrx)

    _M_Demo.BulbulatorPrx = BulbulatorPrx
    del BulbulatorPrx

    _M_Demo.Bulbulator = Ice.createTempClass()
    class Bulbulator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Bulbulator', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Bulbulator'

        @staticmethod
        def ice_staticId():
            return '::Demo::Bulbulator'

        def bulbulate(self, b, current=None):
            raise NotImplementedError("servant method 'bulbulate' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_BulbulatorDisp)

        __repr__ = __str__

    _M_Demo._t_BulbulatorDisp = IcePy.defineClass('::Demo::Bulbulator', Bulbulator, (), None, ())
    Bulbulator._ice_type = _M_Demo._t_BulbulatorDisp

    Bulbulator._op_bulbulate = IcePy.Operation('bulbulate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_Demo.Bulbulator = Bulbulator
    del Bulbulator

if 'Color' not in _M_Demo.__dict__:
    _M_Demo.Color = Ice.createTempClass()
    class Color(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Color.RED = Color("RED", 0)
    Color.GREEN = Color("GREEN", 1)
    Color.BLUE = Color("BLUE", 2)
    Color.YELLOW = Color("YELLOW", 3)
    Color.PURPLE = Color("PURPLE", 4)
    Color.ORANGE = Color("ORANGE", 5)
    Color.WHITE = Color("WHITE", 6)
    Color.PINK = Color("PINK", 7)
    Color.CYAN = Color("CYAN", 8)
    Color.LIME = Color("LIME", 9)
    Color._enumerators = { 0:Color.RED, 1:Color.GREEN, 2:Color.BLUE, 3:Color.YELLOW, 4:Color.PURPLE, 5:Color.ORANGE, 6:Color.WHITE, 7:Color.PINK, 8:Color.CYAN, 9:Color.LIME }

    _M_Demo._t_Color = IcePy.defineEnum('::Demo::Color', Color, (), Color._enumerators)

    _M_Demo.Color = Color
    del Color

if '_t_Colors' not in _M_Demo.__dict__:
    _M_Demo._t_Colors = IcePy.defineSequence('::Demo::Colors', (), _M_Demo._t_Color)

_M_Demo._t_Light = IcePy.defineValue('::Demo::Light', Ice.Value, -1, (), False, True, None, ())

if 'LightPrx' not in _M_Demo.__dict__:
    _M_Demo.LightPrx = Ice.createTempClass()
    class LightPrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_Demo.Light._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_Demo.Light._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Light._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_Demo.Light._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_Demo.Light._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_Demo.Light._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Light._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_Demo.Light._op_turnOff.end(self, _r)

        def getState(self, context=None):
            return _M_Demo.Light._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_Demo.Light._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Light._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_Demo.Light._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.LightPrx.ice_checkedCast(proxy, '::Demo::Light', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.LightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Light'
    _M_Demo._t_LightPrx = IcePy.defineProxy('::Demo::Light', LightPrx)

    _M_Demo.LightPrx = LightPrx
    del LightPrx

    _M_Demo.Light = Ice.createTempClass()
    class Light(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Light', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Light'

        @staticmethod
        def ice_staticId():
            return '::Demo::Light'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_LightDisp)

        __repr__ = __str__

    _M_Demo._t_LightDisp = IcePy.defineClass('::Demo::Light', Light, (), None, ())
    Light._ice_type = _M_Demo._t_LightDisp

    Light._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Light._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Light._op_getState = IcePy.Operation('getState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_Demo.Light = Light
    del Light

if 'NormalLight' not in _M_Demo.__dict__:
    _M_Demo.NormalLight = Ice.createTempClass()
    class NormalLight(Ice.Value):
        def __init__(self, state=False):
            self.state = state

        def ice_id(self):
            return '::Demo::NormalLight'

        @staticmethod
        def ice_staticId():
            return '::Demo::NormalLight'

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_NormalLight)

        __repr__ = __str__

    _M_Demo._t_NormalLight = IcePy.defineValue('::Demo::NormalLight', NormalLight, -1, (), False, False, None, (('state', (), IcePy._t_bool, False, 0),))
    NormalLight._ice_type = _M_Demo._t_NormalLight

    _M_Demo.NormalLight = NormalLight
    del NormalLight

if 'NormalLightPrx' not in _M_Demo.__dict__:
    _M_Demo.NormalLightPrx = Ice.createTempClass()
    class NormalLightPrx(_M_Demo.LightPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.NormalLightPrx.ice_checkedCast(proxy, '::Demo::NormalLight', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.NormalLightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::NormalLight'
    _M_Demo._t_NormalLightPrx = IcePy.defineProxy('::Demo::NormalLight', NormalLightPrx)

    _M_Demo.NormalLightPrx = NormalLightPrx
    del NormalLightPrx

    _M_Demo.NormalLightDisp = Ice.createTempClass()
    class NormalLightDisp(_M_Demo.Light):

        def ice_ids(self, current=None):
            return ('::Demo::Light', '::Demo::NormalLight', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::NormalLight'

        @staticmethod
        def ice_staticId():
            return '::Demo::NormalLight'

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_NormalLightDisp)

        __repr__ = __str__

    _M_Demo._t_NormalLightDisp = IcePy.defineClass('::Demo::NormalLight', NormalLightDisp, (), None, (_M_Demo._t_LightDisp,))
    NormalLightDisp._ice_type = _M_Demo._t_NormalLightDisp

    _M_Demo.NormalLightDisp = NormalLightDisp
    del NormalLightDisp

_M_Demo._t_LightController = IcePy.defineValue('::Demo::LightController', Ice.Value, -1, (), False, True, None, ())

if 'LightControllerPrx' not in _M_Demo.__dict__:
    _M_Demo.LightControllerPrx = Ice.createTempClass()
    class LightControllerPrx(Ice.ObjectPrx):

        def setBrightness(self, b, context=None):
            return _M_Demo.LightController._op_setBrightness.invoke(self, ((b, ), context))

        def setBrightnessAsync(self, b, context=None):
            return _M_Demo.LightController._op_setBrightness.invokeAsync(self, ((b, ), context))

        def begin_setBrightness(self, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.LightController._op_setBrightness.begin(self, ((b, ), _response, _ex, _sent, context))

        def end_setBrightness(self, _r):
            return _M_Demo.LightController._op_setBrightness.end(self, _r)

        def getBrightness(self, context=None):
            return _M_Demo.LightController._op_getBrightness.invoke(self, ((), context))

        def getBrightnessAsync(self, context=None):
            return _M_Demo.LightController._op_getBrightness.invokeAsync(self, ((), context))

        def begin_getBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.LightController._op_getBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_getBrightness(self, _r):
            return _M_Demo.LightController._op_getBrightness.end(self, _r)

        def setColor(self, c, context=None):
            return _M_Demo.LightController._op_setColor.invoke(self, ((c, ), context))

        def setColorAsync(self, c, context=None):
            return _M_Demo.LightController._op_setColor.invokeAsync(self, ((c, ), context))

        def begin_setColor(self, c, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.LightController._op_setColor.begin(self, ((c, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_Demo.LightController._op_setColor.end(self, _r)

        def getColor(self, context=None):
            return _M_Demo.LightController._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_Demo.LightController._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.LightController._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_Demo.LightController._op_getColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.LightControllerPrx.ice_checkedCast(proxy, '::Demo::LightController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.LightControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::LightController'
    _M_Demo._t_LightControllerPrx = IcePy.defineProxy('::Demo::LightController', LightControllerPrx)

    _M_Demo.LightControllerPrx = LightControllerPrx
    del LightControllerPrx

    _M_Demo.LightController = Ice.createTempClass()
    class LightController(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::LightController', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::LightController'

        @staticmethod
        def ice_staticId():
            return '::Demo::LightController'

        def setBrightness(self, b, current=None):
            raise NotImplementedError("servant method 'setBrightness' not implemented")

        def getBrightness(self, current=None):
            raise NotImplementedError("servant method 'getBrightness' not implemented")

        def setColor(self, c, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_LightControllerDisp)

        __repr__ = __str__

    _M_Demo._t_LightControllerDisp = IcePy.defineClass('::Demo::LightController', LightController, (), None, ())
    LightController._ice_type = _M_Demo._t_LightControllerDisp

    LightController._op_setBrightness = IcePy.Operation('setBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    LightController._op_getBrightness = IcePy.Operation('getBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    LightController._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_Color, False, 0),), (), None, ())
    LightController._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Demo.LightController = LightController
    del LightController

if 'Dimmer' not in _M_Demo.__dict__:
    _M_Demo.Dimmer = Ice.createTempClass()
    class Dimmer(Ice.Value):
        def __init__(self, state=False, brightness=0, colors=None, color=_M_Demo.Color.RED):
            self.state = state
            self.brightness = brightness
            self.colors = colors
            self.color = color

        def ice_id(self):
            return '::Demo::Dimmer'

        @staticmethod
        def ice_staticId():
            return '::Demo::Dimmer'

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Dimmer)

        __repr__ = __str__

    _M_Demo._t_Dimmer = IcePy.defineValue('::Demo::Dimmer', Dimmer, -1, (), False, False, None, (
        ('state', (), IcePy._t_bool, False, 0),
        ('brightness', (), IcePy._t_int, False, 0),
        ('colors', (), _M_Demo._t_Colors, False, 0),
        ('color', (), _M_Demo._t_Color, False, 0)
    ))
    Dimmer._ice_type = _M_Demo._t_Dimmer

    _M_Demo.Dimmer = Dimmer
    del Dimmer

if 'DimmerPrx' not in _M_Demo.__dict__:
    _M_Demo.DimmerPrx = Ice.createTempClass()
    class DimmerPrx(_M_Demo.LightPrx, _M_Demo.LightControllerPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.DimmerPrx.ice_checkedCast(proxy, '::Demo::Dimmer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.DimmerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Dimmer'
    _M_Demo._t_DimmerPrx = IcePy.defineProxy('::Demo::Dimmer', DimmerPrx)

    _M_Demo.DimmerPrx = DimmerPrx
    del DimmerPrx

    _M_Demo.DimmerDisp = Ice.createTempClass()
    class DimmerDisp(_M_Demo.Light, _M_Demo.LightController):

        def ice_ids(self, current=None):
            return ('::Demo::Dimmer', '::Demo::Light', '::Demo::LightController', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Dimmer'

        @staticmethod
        def ice_staticId():
            return '::Demo::Dimmer'

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_DimmerDisp)

        __repr__ = __str__

    _M_Demo._t_DimmerDisp = IcePy.defineClass('::Demo::Dimmer', DimmerDisp, (), None, (_M_Demo._t_LightDisp, _M_Demo._t_LightControllerDisp))
    DimmerDisp._ice_type = _M_Demo._t_DimmerDisp

    _M_Demo.DimmerDisp = DimmerDisp
    del DimmerDisp

# End of module Demo
